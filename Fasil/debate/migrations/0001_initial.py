# Generated by Django 4.2.5 on 2023-12-28 23:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(max_length=500)),
                ('comment_type', models.CharField(choices=[('normal', 'Normal'), ('super_comment', 'Sub Thread'), ('sub_comment', 'Thread Comment')], default='normal', max_length=255)),
                ('comments', models.ManyToManyField(blank=True, to='debate.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Timeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('support_quote', models.DurationField(blank=True, null=True)),
                ('opposing_quote', models.DurationField(blank=True, null=True)),
                ('rebuttals', models.DurationField(blank=True, null=True)),
                ('counterarguments', models.DurationField(blank=True, null=True)),
                ('questions', models.DurationField(blank=True, null=True)),
                ('answers', models.DurationField(blank=True, null=True)),
                ('vote', models.DurationField(blank=True, null=True)),
                ('super_phase', models.CharField(choices=[('goal1', 'Goal 1'), ('goal2', 'Goal 2'), ('goal3', 'Goal 3')], default='goal1', max_length=100)),
                ('sub_phase', models.CharField(choices=[('support_quote', 'Supporting Quote'), ('opposing_quote', 'Opposing Quote'), ('rebuttal', 'Rebuttal'), ('counterargument', 'Counterargument'), ('question', 'Question'), ('answer', 'Answer'), ('vote', 'Vote')], default='support_quote', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(max_length=500)),
                ('generated_image', models.ImageField(blank=True, null=True, upload_to='media/quotes_image')),
                ('available', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('active', 'Active'), ('finished', 'Finished'), ('rejected', 'Rejected')], default='waiting', max_length=100)),
                ('comments', models.ManyToManyField(blank=True, to='debate.comment')),
                ('father', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(max_length=500)),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('active', 'Active'), ('finished', 'Finished'), ('rejected', 'Rejected')], default='waiting', max_length=100)),
                ('answer1_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer1_quote', to='debate.quote')),
                ('answer2_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer2_quote', to='debate.quote')),
                ('answer3_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer3_quote', to='debate.quote')),
                ('counterargument1_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counterargument1_quote', to='debate.quote')),
                ('counterargument2_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counterargument2_quote', to='debate.quote')),
                ('counterargument3_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counterargument3_quote', to='debate.quote')),
                ('opposing_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opposing_quote', to='debate.quote')),
                ('question1_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question1_quote', to='debate.quote')),
                ('question2_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question2_quote', to='debate.quote')),
                ('question3_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question3_quote', to='debate.quote')),
                ('rebuttal1_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rebuttal1_quote', to='debate.quote')),
                ('rebuttal2_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rebuttal2_quote', to='debate.quote')),
                ('rebuttal3_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rebuttal3_quote', to='debate.quote')),
                ('support_quote', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='support_quote', to='debate.quote')),
            ],
        ),
        migrations.CreateModel(
            name='Debate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=500)),
                ('generated_image', models.ImageField(blank=True, null=True, upload_to='media/debates_image')),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('active', 'Active'), ('finished', 'Finished'), ('canceled', 'Canceled'), ('archieved', 'Archieved')], default='waiting', max_length=100)),
                ('father', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('goals', models.ManyToManyField(to='debate.goal')),
                ('sponsors', models.ManyToManyField(blank=True, to='account.sponsor')),
                ('timeline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='debate.timeline')),
            ],
        ),
        migrations.CreateModel(
            name='CommentShares',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('X', 'X'), ('linkedin', 'Linkedin'), ('threads', 'Threads')], max_length=255)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='debate.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CommentLikes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('from_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_from_account', to=settings.AUTH_USER_MODEL)),
                ('related_to_comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='debate.comment')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='external_shares',
            field=models.ManyToManyField(blank=True, related_name='comment_external_shares', to='debate.commentshares'),
        ),
        migrations.AddField(
            model_name='comment',
            name='father',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='likes',
            field=models.ManyToManyField(blank=True, to='debate.commentlikes'),
        ),
    ]
